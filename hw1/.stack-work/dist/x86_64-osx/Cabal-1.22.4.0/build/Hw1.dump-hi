
==================== FINAL INTERFACE ====================
2016-10-19 22:51:03.673708 UTC

interface Hw1_BIfEhqsJAjG14532ILwRDE:Hw1 7102
  interface hash: 4f14b848433a1412d25a24fa4f2b0705
  ABI hash: 89f81c0fedebdae013e8077b0ae3b0a2
  export-list hash: e6090dcab0f50531a3c941639898985c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0dea4790ba5196f40da82bd45085b1c6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hw1.addEachPair
  Hw1.addEachPairNonRecursive
  Hw1.bigger
  Hw1.doubleEach
  Hw1.doubleEachNonRecursive
  Hw1.drawRectangle
  Hw1.fAct
  Hw1.fPerson
  Hw1.fPlay
  Hw1.fScene
  Hw1.fSpeech
  Hw1.fill
  Hw1.firstDiff
  Hw1.formatPlay
  Hw1.fringe
  Hw1.hanoi
  Hw1.lengthNonRecursive
  Hw1.mainXML
  Hw1.maxList
  Hw1.maxListNonRecursive
  Hw1.minList
  Hw1.minListNonRecursive
  Hw1.myEmail
  Hw1.myFractal
  Hw1.myFractalShape1
  Hw1.myFractalShape2
  Hw1.myMap
  Hw1.myName
  Hw1.mySID
  Hw1.pairAndOne
  Hw1.pairAndOneNonRecursive
  Hw1.rectangle
  Hw1.rtTriangle
  Hw1.sides
  Hw1.sierpinskiCarpet
  Hw1.takeTree
  Hw1.takeTreeWhile
  Hw1.testResults
  Hw1.treeHeight
  Hw1.treeSize
  Hw1.InternalTree{Hw1.IBranch Hw1.ILeaf}
  Hw1.Radius
  Hw1.Shape{Hw1.Ellipse Hw1.Polygon Hw1.Rectangle Hw1.RtTriangle}
  Hw1.Side
  Hw1.Tree{Hw1.Branch Hw1.Leaf}
  Hw1.Vertex
module dependencies: Play SOE XMLTypes
package dependencies: GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML
                      GLURaw-1.5.0.3@GLURa_2ny2CNM2neI3xjbSQY15Ll
                      ObjectName-1.1.0.1@Objec_29HjkJsOm2S5lSH8rBwSAy
                      OpenGLRaw-2.6.1.1@OpenG_5cg6DP2r5P3Ko8xYSniSgL
                      OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE
                      StateVar-1.1.0.1@State_6K4a3UqSdqh6lGAm1wlr9s
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      half-0.2.2.2@half_Jb2RpfGRtnLGOEym0KYOr6 integer-gmp-1.0.0.0
                      old-locale-1.0.0.7@oldlo_D6X1KPq5Sui5XjrHMwvFwK
                      old-time-1.1.0.3@oldti_FBWJJDS5FKr7UKFScBcUW2
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
family instance modules: GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML:Graphics.UI.GLFW
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
import  -/  Play 6a6e33b8a0943857289687f4da6f5fc3
  exports: e5a800f70dca2275beff12a7566b8cfe
  play 45688161117421bcf860dddcd5b4d94d
import  -/  SOE 3c3369a7d0dc47508bbd6b3fa1a80d87
  exports: 77bd7ec94baff5840a472109a735130d
  Blue 73c1194916e5e231fdeaa929631008f6
  Window 2dee452b983f74f1d6d94e784d3178de
  closeWindow 2905b31ca46c1ae8f4f228a5e0e52c69
  drawInWindow bbee0c425e9d5cada9f5ae7147626fa7
  getKey 7b1b5f75a26c89d8675a18a9a209fd43
  openWindow 28afe041e5e4e21f88c408b0031c29a4
  polygon c5e7101f86f655b477befbb354ec09ff
  runGraphics 6a8ef39439cd8236950ee2c1c83f48b1
  withColor fef9b6344ab4ad09feb4c6ddce2aad7b
import  -/  XMLTypes 037c72c6452cf48c1e89475eae72000a
  exports: 2151761c31eaad91bd462c579fb853a4
  Element ea3bc179fb86bc432084a0b3489b30dd
  PCDATA 0d1877dc956e9c1c3ac98757ff09c951
  SimpleXML 259de95812be12badced93b8dbdc2a8b
  xml2string 74c9894bbaa9547faae2d53871652957
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Float a2f1c8675ca4f780f3a8aa0b05d1a5eb
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO 29a6f3d7c8ad8a4e6200d8bbb6e70aae
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
708cba7dce3941a242797e8612378990
  $fEqInternalTree ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Hw1.InternalTree a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (Hw1.InternalTree a)
                  (Hw1.$fEqInternalTree_$c== @ a $dEq)
                  (Hw1.$fEqInternalTree_$c/= @ a $dEq) -}
708cba7dce3941a242797e8612378990
  $fEqInternalTree_$c/= ::
    GHC.Classes.Eq a =>
    Hw1.InternalTree a -> Hw1.InternalTree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dEq :: GHC.Classes.Eq a
                   a1 :: Hw1.InternalTree a
                   b :: Hw1.InternalTree a ->
                 case Hw1.$fEqInternalTree_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
708cba7dce3941a242797e8612378990
  $fEqInternalTree_$c== ::
    GHC.Classes.Eq a =>
    Hw1.InternalTree a -> Hw1.InternalTree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree :: GHC.Classes.Eq a => GHC.Classes.Eq (Hw1.Tree a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (Hw1.Tree a)
                  (Hw1.$fEqTree_$c== @ a $dEq)
                  (Hw1.$fEqTree_$c/= @ a $dEq) -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree_$c/= ::
    GHC.Classes.Eq a => Hw1.Tree a -> Hw1.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a $dEq :: GHC.Classes.Eq a a1 :: Hw1.Tree a b :: Hw1.Tree a ->
                 case Hw1.$fEqTree_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree_$c== ::
    GHC.Classes.Eq a => Hw1.Tree a -> Hw1.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree ::
    GHC.Show.Show a => GHC.Show.Show (Hw1.InternalTree a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Hw1.InternalTree a)
                  (Hw1.$fShowInternalTree_$cshowsPrec @ a $dShow)
                  (Hw1.$fShowInternalTree_$cshow @ a $dShow)
                  (Hw1.$fShowInternalTree_$cshowList @ a $dShow) -}
fb81d70741c8819630ae2b73a2aa552b
  $fShowInternalTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshow ::
    GHC.Show.Show a => Hw1.InternalTree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dShow :: GHC.Show.Show a x :: Hw1.InternalTree a ->
                 Hw1.$fShowInternalTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshowList ::
    GHC.Show.Show a => [Hw1.InternalTree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Hw1.InternalTree a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw1.InternalTree a)
                   (Hw1.$fShowInternalTree_$cshowsPrec
                      @ a
                      $dShow
                      Hw1.$fShowInternalTree1)
                   eta
                   eta1) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Hw1.InternalTree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape :: GHC.Show.Show Hw1.Shape
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw1.Shape
                  Hw1.$fShowShape_$cshowsPrec
                  Hw1.$fShowShape_$cshow
                  Hw1.$fShowShape_$cshowList -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape1 :: Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Hw1.Shape -> Hw1.$w$cshowsPrec 0 w) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshow :: Hw1.Shape -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw1.Shape ->
                 Hw1.$fShowShape_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshowList :: [Hw1.Shape] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Hw1.Shape Hw1.$fShowShape1) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshowsPrec ::
    GHC.Types.Int -> Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Hw1.Shape ->
                 case w of ww { GHC.Types.I# ww1 -> Hw1.$w$cshowsPrec ww1 w1 }) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree :: GHC.Show.Show a => GHC.Show.Show (Hw1.Tree a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Hw1.Tree a)
                  (Hw1.$fShowTree_$cshowsPrec @ a $dShow)
                  (Hw1.$fShowTree_$cshow @ a $dShow)
                  (Hw1.$fShowTree_$cshowList @ a $dShow) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshow ::
    GHC.Show.Show a => Hw1.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dShow :: GHC.Show.Show a x :: Hw1.Tree a ->
                 Hw1.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [Hw1.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Hw1.Tree a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw1.Tree a)
                   (Hw1.$fShowTree_$cshowsPrec @ a $dShow Hw1.$fShowInternalTree1)
                   eta
                   eta1) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Hw1.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a w :: GHC.Show.Show a w1 :: GHC.Types.Int w2 :: Hw1.Tree a ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Hw1.$w$cshowsPrec1 @ a w ww1 w2 }) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $w$cshowsPrec :: GHC.Prim.Int# -> Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
ef754425fcab8354ffb8e24c506383d1
  $w$cshowsPrec1 ::
    GHC.Show.Show a => GHC.Prim.Int# -> Hw1.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0] -}
04f5e7fc490097f565225cc9b733f494
  $wa ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S,1*U><L,U>,
     Inline: [0] -}
5f70426d920a49a0dc823a45b5608e5a
  $wa1 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
1ad2438e2b111fb9fa6f7db9c382ffe3
  $wa2 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S,1*U><L,U>,
     Inline: [0] -}
3a87a38f51b26a498f5f076ba80f51da
  $wa3 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S,1*U><L,U>,
     Inline: [0] -}
9121a788d492bae1a900603b2118a195
  $wtakeTree ::
    GHC.Prim.Int# -> Hw1.InternalTree a -> Hw1.InternalTree a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0] -}
bbc479cad556037a4e4341df6492e462
  $wtreeHeight :: Hw1.Tree a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
e6a9e1265ff714f2dd0a1e48f2cb666c
  $wtreeSize :: Hw1.Tree a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
708cba7dce3941a242797e8612378990
  data InternalTree a
    = ILeaf | IBranch a (Hw1.InternalTree a) (Hw1.InternalTree a)
    Promotable
6991eccce4f7b4ec64db40174e6e75b2
  type Radius = GHC.Types.Float
db7ac45cb8f44d2c764444a16f5ed4d2
  data Shape
    = Rectangle Hw1.Side Hw1.Side
    | Ellipse Hw1.Radius Hw1.Radius
    | RtTriangle Hw1.Side Hw1.Side
    | Polygon [Hw1.Vertex]
837638b1377320c4159828d104b06eae
  type Side = GHC.Types.Float
ef754425fcab8354ffb8e24c506383d1
  data Tree a = Leaf a | Branch (Hw1.Tree a) (Hw1.Tree a)
    Promotable
7225ecb5c1fb9ee5013773c683bf5f6b
  type Vertex = (GHC.Types.Float, GHC.Types.Float)
558dc9473d3b7cdc545514abf8ecc9db
  addEachPair :: [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
78a57a11d28fe82e2b6c25ccde412c01
  addEachPairNonRecursive ::
    [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ xs :: [(GHC.Types.Int, GHC.Types.Int)] ->
                 GHC.Base.build
                   @ GHC.Types.Int
                   (\ @ b1 c :: GHC.Types.Int -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ (GHC.Types.Int, GHC.Types.Int)
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Int
                         @ b1
                         @ (GHC.Types.Int, GHC.Types.Int)
                         c
                         Hw1.addEachPairNonRecursive1)
                      n
                      xs)) -}
f58f45d90634381a2fb655696e9ea66f
  addEachPairNonRecursive1 ::
    (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (GHC.Types.Int, GHC.Types.Int) ->
                 case ds of wild { (,) a b -> GHC.Num.$fNumInt_$c+ a b }) -}
e54b2e27267e326dc7bd5df4712d462b
  bigger :: Hw1.Shape -> GHC.Types.Float -> Hw1.Shape
  {- Arity: 2, Strictness: <S,1*U><L,U(U)>,
     Unfolding: (\ ds :: Hw1.Shape e :: GHC.Types.Float ->
                 case ds of wild {
                   Hw1.Rectangle len width
                   -> Hw1.Rectangle
                        (case len of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                        (case width of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                   Hw1.Ellipse x y
                   -> Hw1.Ellipse
                        (case x of wild1 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x1 (GHC.Prim.sqrtFloat# x1)) })
                        (case y of wild1 { GHC.Types.F# x1 ->
                         case e of wild2 { GHC.Types.F# x2 ->
                         GHC.Types.F#
                           (GHC.Prim.timesFloat# x1 (GHC.Prim.sqrtFloat# x2)) } })
                   Hw1.RtTriangle len1 len2
                   -> Hw1.RtTriangle
                        (case len1 of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                        (case len2 of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                   Hw1.Polygon ipv -> Hw1.bigger1 }) -}
c24919bac287759f56e6a0bab933a48e
  bigger1 :: Hw1.Shape
  {- Strictness: b -}
69a5a67e6a14597a9d9261bfb3d8d272
  doubleEach :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
af820376ed93292e22ec25a005278df7
  doubleEachNonRecursive :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ xs :: [GHC.Types.Int] ->
                 GHC.Base.build
                   @ GHC.Types.Int
                   (\ @ b1 c :: GHC.Types.Int -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Int
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Int
                         @ b1
                         @ GHC.Types.Int
                         c
                         Hw1.doubleEachNonRecursive1)
                      n
                      xs)) -}
2f1e0ac8cea094eccfaac1eb2d091d1e
  doubleEachNonRecursive1 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GHC.Types.Int ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.*# x 2) }) -}
82fe1da70c251d2af48d8f09f5da8085
  drawRectangle ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S(S),1*U(1*U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.drawRectangle1
                  `cast`
                (<SOE.Window>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
27b65532f64a41e9a79e19825db3d917
  drawRectangle1 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S(S),1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: SOE.Window
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int
                   w4 :: GHC.Types.Int
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { GHC.Types.I# ww1 -> Hw1.$wa w w1 w2 w3 ww1 w5 }) -}
05dac1b1c0d26ed79f7f22edb95b355e
  fAct :: XMLTypes.SimpleXML -> [XMLTypes.SimpleXML]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: XMLTypes.SimpleXML ->
                 case ds of wild {
                   XMLTypes.PCDATA ipv -> Hw1.fAct4
                   XMLTypes.Element ds1 t
                   -> case GHC.Base.eqString ds1 Hw1.fAct3 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ds1 Hw1.fAct2 of wild2 {
                             GHC.Types.False -> Hw1.fAct4
                             GHC.Types.True
                             -> GHC.Types.:
                                  @ XMLTypes.SimpleXML
                                  (XMLTypes.Element Hw1.fAct1 t)
                                  (GHC.Types.[] @ XMLTypes.SimpleXML) }
                        GHC.Types.True
                        -> Hw1.fAct_go t (GHC.Types.[] @ XMLTypes.SimpleXML) } }) -}
7a68b4381521194cddd39f3620cc179c
  fAct1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "h2"#) -}
60a2cb201066bc5288dfad7df79035da
  fAct2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TITLE"#) -}
d4034ac4856e33f95ba61b80e8f6ac46
  fAct3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SCENE"#) -}
efc3246c0ba1d6d6de32dc1bcf6009ea
  fAct4 :: [XMLTypes.SimpleXML]
  {- Strictness: b -}
78df861648241df9048f1ca3a5c6f57d
  fAct_go ::
    [XMLTypes.SimpleXML]
    -> [XMLTypes.SimpleXML] -> [XMLTypes.SimpleXML]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
04f54a42bc650caebef959a022fec0e1
  fPerson :: XMLTypes.SimpleXML -> [XMLTypes.SimpleXML]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: XMLTypes.SimpleXML ->
                 case ds of wild {
                   XMLTypes.PCDATA ipv -> Hw1.fPerson5
                   XMLTypes.Element ds1 p
                   -> case GHC.Base.eqString ds1 Hw1.fPerson4 of wild1 {
                        GHC.Types.False -> Hw1.fPerson5
                        GHC.Types.True
                        -> GHC.Base.++ @ XMLTypes.SimpleXML p Hw1.fPerson1 } }) -}
6e2ba5073ceeb5ce410f8175dd020169
  fPerson1 :: [XMLTypes.SimpleXML]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMLTypes.SimpleXML
                   Hw1.fPerson2
                   (GHC.Types.[] @ XMLTypes.SimpleXML)) -}
7439157f6a03636d2143acf9c6b5b013
  fPerson2 :: XMLTypes.SimpleXML
  {- Strictness: m2,
     Unfolding: (XMLTypes.Element
                   Hw1.fPerson3
                   (GHC.Types.[] @ XMLTypes.SimpleXML)) -}
3b17c402ba9932b37efdd27e34fc2019
  fPerson3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "br"#) -}
f773d4bf2ce736f437718d477dcd3297
  fPerson4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PERSONA"#) -}
6e3853a95cb7274dab0040a24d35def4
  fPerson5 :: [XMLTypes.SimpleXML]
  {- Strictness: b -}
1d687e32ac93625ae8a6567e56922ee7
  fPlay :: XMLTypes.SimpleXML -> [XMLTypes.SimpleXML]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: XMLTypes.SimpleXML ->
                 case ds of wild {
                   XMLTypes.PCDATA ipv -> Hw1.fPlay8
                   XMLTypes.Element ds1 t
                   -> case GHC.Base.eqString ds1 Hw1.fPlay7 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ds1 Hw1.fPlay6 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString ds1 Hw1.fAct2 of wild3 {
                                  GHC.Types.False -> Hw1.fPlay8
                                  GHC.Types.True
                                  -> GHC.Types.:
                                       @ XMLTypes.SimpleXML
                                       (XMLTypes.Element Hw1.fPlay5 t)
                                       (GHC.Types.[] @ XMLTypes.SimpleXML) }
                             GHC.Types.True
                             -> GHC.Types.:
                                  @ XMLTypes.SimpleXML
                                  Hw1.fPlay1
                                  (Hw1.fPlay_go1 t (GHC.Types.[] @ XMLTypes.SimpleXML)) }
                        GHC.Types.True
                        -> Hw1.fPlay_go t (GHC.Types.[] @ XMLTypes.SimpleXML) } }) -}
37d06394750c2b3c19906d5c4395f2c3
  fPlay1 :: XMLTypes.SimpleXML
  {- Strictness: m2,
     Unfolding: (XMLTypes.Element Hw1.fAct1 Hw1.fPlay2) -}
5d81709db233e36856d24aaa08f8fe09
  fPlay2 :: [XMLTypes.SimpleXML]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMLTypes.SimpleXML
                   Hw1.fPlay3
                   (GHC.Types.[] @ XMLTypes.SimpleXML)) -}
83dbcbf33678e7c87a7e9e4697f4e35e
  fPlay3 :: XMLTypes.SimpleXML
  {- Strictness: m1, Unfolding: (XMLTypes.PCDATA Hw1.fPlay4) -}
1006dd513e0d7e949d2a2d914709c986
  fPlay4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Dramatis Personae"#) -}
9368351bcfdaf38e83e0a43e91b780dc
  fPlay5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "h1"#) -}
08fe6c1ab66231cee8d1c616cfd77b26
  fPlay6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PERSONAE"#) -}
e6352deb33d81cd363338257254eeaa4
  fPlay7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACT"#) -}
f523c6f6500c5fd61e73dd04f3918835
  fPlay8 :: [XMLTypes.SimpleXML]
  {- Strictness: b -}
48f77483546a71509fad16307b636309
  fPlay_go ::
    [XMLTypes.SimpleXML]
    -> [XMLTypes.SimpleXML] -> [XMLTypes.SimpleXML]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
265c12a4b11a8a5e980e8f3f3e0fced5
  fPlay_go1 ::
    [XMLTypes.SimpleXML]
    -> [XMLTypes.SimpleXML] -> [XMLTypes.SimpleXML]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
bc1091c8f91734f021ea552773915953
  fScene :: XMLTypes.SimpleXML -> [XMLTypes.SimpleXML]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: XMLTypes.SimpleXML ->
                 case ds of wild {
                   XMLTypes.PCDATA ipv -> Hw1.fScene3
                   XMLTypes.Element ds1 t
                   -> case GHC.Base.eqString ds1 Hw1.fScene2 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ds1 Hw1.fAct2 of wild2 {
                             GHC.Types.False -> Hw1.fScene3
                             GHC.Types.True
                             -> GHC.Types.:
                                  @ XMLTypes.SimpleXML
                                  (XMLTypes.Element Hw1.fScene1 t)
                                  (GHC.Types.[] @ XMLTypes.SimpleXML) }
                        GHC.Types.True
                        -> Hw1.fScene_go t (GHC.Types.[] @ XMLTypes.SimpleXML) } }) -}
15c2fbc1b28572c4a47c8c9e1bd46342
  fScene1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "h3"#) -}
06e6d53f28dc28c03d0ab57c2c7073b0
  fScene2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEECH"#) -}
03389725df72d024c6a38dd65375f2f7
  fScene3 :: [XMLTypes.SimpleXML]
  {- Strictness: b -}
61508eaad4c3a892fda85e5f55301210
  fScene_go ::
    [XMLTypes.SimpleXML]
    -> [XMLTypes.SimpleXML] -> [XMLTypes.SimpleXML]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3b73d8512575a3f4e723231451776039
  fSpeech :: XMLTypes.SimpleXML -> [XMLTypes.SimpleXML]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: XMLTypes.SimpleXML ->
                 case ds of wild {
                   XMLTypes.PCDATA ipv -> Hw1.fSpeech4
                   XMLTypes.Element ds1 s
                   -> case GHC.Base.eqString ds1 Hw1.fSpeech3 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ds1 Hw1.fSpeech2 of wild2 {
                             GHC.Types.False -> Hw1.fSpeech4
                             GHC.Types.True
                             -> GHC.Types.:
                                  @ XMLTypes.SimpleXML
                                  (XMLTypes.Element Hw1.fSpeech1 s)
                                  Hw1.fPerson1 }
                        GHC.Types.True
                        -> GHC.Base.++ @ XMLTypes.SimpleXML s Hw1.fPerson1 } }) -}
3aaeb359f82e089d5b20720cd68eab20
  fSpeech1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "b"#) -}
bfbfb1bd00cde4113c109e2a0ac289f9
  fSpeech2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEAKER"#) -}
b6061a8a119dcf6fd85946cd3238469a
  fSpeech3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LINE"#) -}
6f659b82dcf998122145f4479a560c46
  fSpeech4 :: [XMLTypes.SimpleXML]
  {- Strictness: b -}
6df4ed5ebbfdfbea78631080ad72a5cb
  fill ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),A)><L,U(U)><L,U(U)><L,U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.fill1
                  `cast`
                (<SOE.Window>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
bd67042cda9c8991ececed76ffe2b5c5
  fill1 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),A)><L,U(U)><L,U(U)><L,U(U)><L,U>,
     Unfolding: (\ w :: SOE.Window
                   x :: GHC.Types.Int
                   y :: GHC.Types.Int
                   size :: GHC.Types.Int
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.drawInWindow1
                   w
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                           `cast`
                         (GHC.Ptr.FunPtr
                            (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                    case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           ds5
                           __float 0.0
                           __float 0.0
                           __float 1.0
                           s of wild1 { (##) ds12 ->
                    SOE.polygon1
                      (GHC.Types.:
                         @ SOE.Point
                         (x, y)
                         (GHC.Types.:
                            @ SOE.Point
                            (x, GHC.Num.$fNumInt_$c+ y size)
                            (GHC.Types.:
                               @ SOE.Point
                               (GHC.Num.$fNumInt_$c+ x size, GHC.Num.$fNumInt_$c+ y size)
                               (GHC.Types.:
                                  @ SOE.Point
                                  (GHC.Num.$fNumInt_$c+ x size, y)
                                  (GHC.Types.: @ SOE.Point (x, y) (GHC.Types.[] @ SOE.Point))))))
                      ds12 } })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0])))
                   eta) -}
2b675d1b22daea0c9d1948734419d81e
  firstDiff ::
    GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe ([a], [a])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
ea2405db9836a5980be2ae0628a31386
  firstDiff_$sfirstDiff ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Base.Maybe ([GHC.Types.Char], [GHC.Types.Char])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
961006fca51cb35576a450a0690bc0c3
  formatPlay :: XMLTypes.SimpleXML -> XMLTypes.SimpleXML
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XMLTypes.SimpleXML ->
                 case w of wild {
                   XMLTypes.PCDATA ipv -> Hw1.formatPlay4
                   XMLTypes.Element ds xml
                   -> case GHC.Base.eqString ds Hw1.formatPlay3 of wild1 {
                        GHC.Types.False -> Hw1.formatPlay4
                        GHC.Types.True
                        -> XMLTypes.Element
                             Hw1.formatPlay2
                             (GHC.Types.:
                                @ XMLTypes.SimpleXML
                                (XMLTypes.Element
                                   Hw1.formatPlay1
                                   (Hw1.formatPlay_go xml (GHC.Types.[] @ XMLTypes.SimpleXML)))
                                (GHC.Types.[] @ XMLTypes.SimpleXML)) } }) -}
2922abbbe77e449eb35ca13bd6398220
  formatPlay1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "body"#) -}
6835f63b26bf76c2820ca4a9f1a86fb1
  formatPlay2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "html"#) -}
130d4421127a95286f2e6159589c3ef0
  formatPlay3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PLAY"#) -}
990191138d79984e53566cb1fe4110c3
  formatPlay4 :: XMLTypes.SimpleXML
  {- Strictness: b -}
82c6346bc4cb4d2616a7be2032d116d2
  formatPlay_go ::
    [XMLTypes.SimpleXML]
    -> [XMLTypes.SimpleXML] -> [XMLTypes.SimpleXML]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
5358b16cebde1d01c4440aafe8cfff6d
  fringe :: Hw1.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6ad5f06a51b804e18f855f5aa3e52eb7
  hanoi ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <S(S),1*U(1*U)><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.hanoi1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
00f6fa88e68b92f2653d97230ed511ae
  hanoi1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S(S),1*U(1*U)><L,U><L,U><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GHC.Base.String
                   w2 :: GHC.Base.String
                   w3 :: GHC.Base.String
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { GHC.Types.I# ww1 -> Hw1.$wa1 ww1 w1 w2 w3 w4 }) -}
2a43c0fd4666c5d56f3753492ad0afc8
  lengthNonRecursive :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a list0 :: [a] ->
                 case GHC.List.$wlenAcc @ a list0 0 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
c337e3d6c0658f95668d4ccfb9ed54c2
  mainXML :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.mainXML1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
85ab04c76fe1c0698e760e8b2bba34c4
  mainXML1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.IO.writeFile1
                        Hw1.mainXML9
                        Hw1.mainXML8
                        s of ds1 { (#,#) ipv ipv1 ->
                 Hw1.mainXML3 Hw1.mainXML9 Hw1.mainXML2 ipv }) -}
8d0bfbc88df3a9315deb6fcbfc00764d
  mainXML2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sample.html"#) -}
a86893ec4383426fa644f12932f486b5
  mainXML3 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ file1 :: GHC.Base.String
                   file2 :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        file1
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.FD.openFile1
                        file2
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Hw1.firstDiff_$sfirstDiff ipv3 ipv7 of wild {
                   GHC.Base.Nothing
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Hw1.mainXML7
                        GHC.Types.False
                        ipv6
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) cs ds5 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hw1.mainXML6
                             GHC.Types.False
                             ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.List.$wunsafeTake @ GHC.Types.Char 20 cs)
                             GHC.Types.False
                             ipv8 of ds7 { (#,#) ipv10 ipv11 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hw1.mainXML5
                             GHC.Types.False
                             ipv10 of ds8 { (#,#) ipv12 ipv13 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.List.$wunsafeTake @ GHC.Types.Char 20 ds5)
                             GHC.Types.False
                             ipv12 of ds9 { (#,#) ipv14 ipv15 ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Hw1.mainXML4
                        GHC.Types.False
                        ipv14 } } } } } } } } } }) -}
ba5dfefd556bcfc3580478c5452a77b8
  mainXML4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "'\n"#) -}
a32b97c1c974c62aa6b725fb77cc4b93
  mainXML5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "' vs '"#) -}
e07b5e38b47180ab6e5934f230cabc0a
  mainXML6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Results differ: '"#) -}
339bf90a92d287f99ef816bc51d2beda
  mainXML7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Success!\n"#) -}
eff834f37291d83a6f18df15ae75fe18
  mainXML8 :: GHC.Base.String
  {- Unfolding: (case GHC.Base.eqString
                        Play.play12552
                        Hw1.formatPlay3 of wild {
                   GHC.Types.False
                   -> case Hw1.formatPlay4 ret_ty GHC.Base.String of {}
                   GHC.Types.True
                   -> XMLTypes.xml2string
                        (XMLTypes.Element
                           Hw1.formatPlay2
                           (GHC.Types.:
                              @ XMLTypes.SimpleXML
                              (XMLTypes.Element
                                 Hw1.formatPlay1
                                 (Hw1.formatPlay_go Play.play1 (GHC.Types.[] @ XMLTypes.SimpleXML)))
                              (GHC.Types.[] @ XMLTypes.SimpleXML))) }) -}
588b635307378e625ca9b91cad8b2fe5
  mainXML9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "dream.html"#) -}
f9414d65f0632cb9148adfcb6816245f
  maxList :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
b0b447399fbeb0540257f328e591437b
  maxListNonRecursive :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ lst :: [GHC.Types.Int] ->
                 GHC.List.strictMaximum @ GHC.Types.Int GHC.Classes.$fOrdInt lst) -}
0e9ff3f68e6f3d1a4f60cd1f4969dfaa
  minList :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
8c4d6eabec6c655e5bee8db0354ad5d9
  minListNonRecursive :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ lst :: [GHC.Types.Int] ->
                 GHC.List.strictMinimum @ GHC.Types.Int GHC.Classes.$fOrdInt lst) -}
68350e15ec3bc8fcaa761a1ba847bc7c
  myEmail :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "chl730@eng.ucsd.edu"#) -}
30842bbd7615e91087be2597466ee968
  myFractal :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.myFractal1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
c3677498fe6e4340de0d7041af4fd534
  myFractal1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.$wa6
                        Hw1.myFractal8
                        Hw1.myFractal6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Hw1.$wa3
                        ipv1
                        Hw1.myFractal5
                        Hw1.myFractal4
                        Hw1.myFractal3
                        6
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Hw1.$wa2
                        ipv1
                        Hw1.myFractal5
                        Hw1.myFractal2
                        Hw1.myFractal3
                        6
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case SOE.getKey1 ipv1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 SOE.closeWindow1 ipv1 ipv6 } } } }) -}
f64a744366a69960448196ee14046d45
  myFractal2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 598) -}
9fc20506a16d21aa53107a582095301d
  myFractal3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 600) -}
5551392fa2eee24f1fc82d3004c4022d
  myFractal4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2) -}
c665646d4e285b9635554e86680f0998
  myFractal5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 300) -}
6650a80486e9fabef5e73a99a00b039d
  myFractal6 :: GHC.Base.Maybe SOE.Size
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ SOE.Size Hw1.myFractal7) -}
39a7fc19ba4e0606725ce3fe8f186d1a
  myFractal7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Hw1.myFractal3, Hw1.myFractal3)) -}
78e17e311cde5d8befe0024bf11ba838
  myFractal8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "myFractal"#) -}
30c2c6406d4e4586e17e29073d0af449
  myFractalShape1 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S(S),1*U(1*U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.myFractalShape4
                  `cast`
                (<SOE.Window>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
11e6d9a1beecea21c4502a5739d0fe1f
  myFractalShape2 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S(S),1*U(1*U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.myFractalShape5
                  `cast`
                (<SOE.Window>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7006591ebc54edd4ee62b96c579c0492
  myFractalShape4 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S(S),1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: SOE.Window
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int
                   w4 :: GHC.Types.Int
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 Hw1.$wa3 w w1 w2 w3 ww1 w5 }) -}
716a0f2af1d7aea6e7a08d89b89c806a
  myFractalShape5 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S(S),1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: SOE.Window
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int
                   w4 :: GHC.Types.Int
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 Hw1.$wa2 w w1 w2 w3 ww1 w5 }) -}
004bc94e2c4ad0cb629ad4b2e42183fb
  myMap :: (a -> b) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a @ b f :: a -> b xs :: [a] ->
                 letrec {
                   go :: [a] -> [b] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [a] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ b : y ys -> GHC.Types.: @ b (f y) (go ys) }
                 } in
                 go xs) -}
18029407f2afa2760169592a6d07259c
  myName :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Che Liu"#) -}
cfec30fe2a09fbdcf93f012d24606158
  mySID :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "A53209595"#) -}
1c697d95738414154e8490a53d3e834a
  pairAndOne :: [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
3b0691504e1fd21bc89f509845e990e5
  pairAndOneNonRecursive ::
    [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ xs :: [GHC.Types.Int] ->
                 GHC.Base.build
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (\ @ b1
                      c :: (GHC.Types.Int, GHC.Types.Int) -> b1 -> b1[OneShot]
                      n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Int
                      @ b1
                      (GHC.Base.mapFB
                         @ (GHC.Types.Int, GHC.Types.Int)
                         @ b1
                         @ GHC.Types.Int
                         c
                         Hw1.pairAndOneNonRecursive1)
                      n
                      xs)) -}
24fea967e2957f0cc1a272d0f3b05436
  pairAndOneNonRecursive1 ::
    GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GHC.Types.Int ->
                 (x,
                  case x of wild { GHC.Types.I# x1 ->
                  GHC.Types.I# (GHC.Prim.+# x1 1) })) -}
996798327d7c031efaedcd4832d49eec
  rectangle :: Hw1.Side -> Hw1.Side -> Hw1.Shape
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True) Hw1.Rectangle -}
c3115d9147de63f9e7641518ae3ce02a
  rtTriangle :: Hw1.Side -> Hw1.Side -> Hw1.Shape
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True) Hw1.RtTriangle -}
52b26ac25b2f3501092306d9f2556dc9
  sides :: Hw1.Shape -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Hw1.Shape ->
                 case w of wild {
                   Hw1.Rectangle ds ds1 -> GHC.Types.I# 4
                   Hw1.Ellipse x y -> GHC.Types.I# 42
                   Hw1.RtTriangle ds ds1 -> GHC.Types.I# 3
                   Hw1.Polygon vertexes
                   -> case GHC.List.$wlenAcc
                             @ (GHC.Types.Float, GHC.Types.Float)
                             vertexes
                             0 of ww { DEFAULT ->
                      GHC.Types.I# ww } }) -}
32eb9501949b2bfd15a8cb7dfa677aba
  sierpinskiCarpet :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.sierpinskiCarpet1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6c07b65d53d9278cf588cfc6c65ba79f
  sierpinskiCarpet1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.$wa6
                        Hw1.sierpinskiCarpet2
                        Hw1.myFractal6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Hw1.$wa
                        ipv1
                        Hw1.$fShowInternalTree1
                        Hw1.$fShowInternalTree1
                        Hw1.myFractal3
                        5
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case SOE.getKey1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 SOE.closeWindow1 ipv1 ipv4 } } }) -}
a23d633d057c50b396a88b631da3dce6
  sierpinskiCarpet2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sierpinski Carpet"#) -}
fe3a7abdc28c1d94c16947c79c68b190
  takeTree ::
    GHC.Types.Int -> Hw1.InternalTree a -> Hw1.InternalTree a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a w :: GHC.Types.Int w1 :: Hw1.InternalTree a ->
                 case w of ww { GHC.Types.I# ww1 -> Hw1.$wtakeTree @ a ww1 w1 }) -}
8043b7f6d7dbb69d9a113d0f95a60423
  takeTreeWhile ::
    (a -> GHC.Types.Bool) -> Hw1.InternalTree a -> Hw1.InternalTree a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
454dd4fa5ad859a24d5052a7194bfde6
  testResults ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.mainXML3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
fb476ef0dee4300fcb7694f86b54190b
  treeHeight :: Hw1.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a w :: Hw1.Tree a ->
                 case Hw1.$wtreeHeight @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
a5a406f3c6d50ce1421776e54d802e3e
  treeSize :: Hw1.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a w :: Hw1.Tree a ->
                 case Hw1.$wtreeSize @ a w of ww { DEFAULT -> GHC.Types.I# ww }) -}
instance GHC.Classes.Eq [Hw1.InternalTree] = Hw1.$fEqInternalTree
instance GHC.Classes.Eq [Hw1.Tree] = Hw1.$fEqTree
instance GHC.Show.Show [Hw1.InternalTree] = Hw1.$fShowInternalTree
instance GHC.Show.Show [Hw1.Shape] = Hw1.$fShowShape
instance GHC.Show.Show [Hw1.Tree] = Hw1.$fShowTree
"SPEC firstDiff @ Char" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                  GHC.Types.Char
  Hw1.firstDiff @ GHC.Types.Char $dEq = Hw1.firstDiff_$sfirstDiff
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

